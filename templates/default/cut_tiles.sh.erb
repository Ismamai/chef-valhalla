#!/bin/bash
set -e

# make sure only one is running at any time...
LOCK_FILE="<%= node[:valhalla][:lock_dir] %>/cut_tiles.lock"
(set -C; : > ${LOCK_FILE}) 2> /dev/null
if [ $? != "0" ]; then
   echo "Lock file exists"
   exit 0
fi
trap 'rm $LOCK_FILE' EXIT 1 2 3

export PATH=$PATH:/usr/local/bin
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib

# get all the lua programs for data import
cp -rp <%= node[:valhalla][:src_dir] %>/mjolnir/conf/*.lua <%= node[:valhalla][:conf_dir] %>

# name the dir where this will go
stamp=$(date +%Y_%m_%d-%H_%M_%S)
cur_tile_dir=$(dirname <%= node[:valhalla][:tile_dir] %>)/tiles_${stamp}

# if we dont have admins we must create them
extracts=$(find <%= node[:valhalla][:extracts_dir] %> -type f -name "*.pbf")
admin_file=$(jq -r '.mjolnir.admin.admin_dir' <%= node[:valhalla][:config] %>)/$(jq -r '.mjolnir.admin.db_name' <%= node[:valhalla][:config] %>)
transit_file=$(jq -r '.mjolnir.transit.transit_dir' <%= node[:valhalla][:config] %>)/$(jq -r '.mjolnir.transit.db_name' <%= node[:valhalla][:config] %>)
stats_file=$(jq -r '.mjolnir.statistics.statistics_dir' <%= node[:valhalla][:config] %>)/$(jq -r '.mjolnir.statistics.db_name' <%= node[:valhalla][:config] %>)
if [ ! -e $admin_file ]; then
  pbfadminbuilder -c <%= node[:valhalla][:config] %> $(find <%= node[:valhalla][:extracts_dir] %> -type f -name "*.pbf")
fi

# cut tiles from the data
pbfgraphbuilder -c <%= node[:valhalla][:config] %> $(find <%= node[:valhalla][:extracts_dir] %> -type f -name "*.pbf")
rm -rf *.bin

# generate connectivity map geojson, tile dir is as good a place as any
# we can ship the whole tile dir to s3 anyway, admin connectivity and all
pushd <%= node[:valhalla][:tile_dir] %>
connectivitymap -c <%= node[:valhalla][:config] %>
mv ${stats_file} $(basename ${stats_file} | sed -e "s/\(\.[^.]\+$\)/_${stamp}\1/g")
stats_file=$(basename ${stats_file} | sed -e "s/\(\.[^.]\+$\)/_${stamp}\1/g")
mv connectivity.json connectivity_${stamp}.json
popd

# backup files and tile dirs, keep the admin stuff though
mkdir -p ${cur_tile_dir}
mv <%= node[:valhalla][:tile_dir] %>/* ${cur_tile_dir}/
if [ -e ${cur_tile_dir}/$(basename ${admin_file}) ]; then
  cp -rp ${cur_tile_dir}/$(basename ${admin_file}) <%= node[:valhalla][:tile_dir] %>
fi
if [ -e ${cur_tile_dir}/$(basename ${transit_file}) ]; then
  cp -rp ${cur_tile_dir}/$(basename ${transit_file}) <%= node[:valhalla][:tile_dir] %>
fi

# do we want to send this update to s3 (do so in the background)
if [ "<%= node[:valhalla][:with_updates] %>" == true ]; then
  {
    set +e
    tar pcf - -C ${cur_tile_dir} . | pigz -9 > ${cur_tile_dir}.tgz
    <%= node[:valhalla][:conf_dir] %>/push_tiles.py connectivity_${stamp}.json ${stats_file} ${cur_tile_dir}.tgz
    rm -rf ${cur_tile_dir} ${cur_tile_dir}.tgz
  }&
fi
